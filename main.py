import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

from agents.ocr_agent import extract_text_from_image
from agents.gigachat_agent import answer_question, explain_simple
from utils.ticket_manager import add_ticket, get_tickets, delete_ticket

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# === Telegram bot ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø StudyBuddy ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∫ —Å–µ—Å—Å–∏–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/tickets ‚Äî —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤\n"
        "/train ‚Äî —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/delete <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç\n"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if update.message.photo:
        photo = await update.message.photo[-1].get_file()
        image_path = f"temp_{user_id}.jpg"
        await photo.download_to_drive(image_path)
        question = extract_text_from_image(image_path)
        try:
            os.remove(image_path)
        except Exception:
            pass
    else:
        question = update.message.text

    await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    answer = answer_question(question)
    add_ticket(user_id, question, answer)

    keyboard = [[InlineKeyboardButton("üìò –û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—â–µ", callback_data=f"explain_{len(get_tickets(user_id)) - 1}")]]
    await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –±–∏–ª–µ—Ç ‚Ññ{len(get_tickets(user_id))}\n\n{answer}", reply_markup=InlineKeyboardMarkup(keyboard))

async def list_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tickets = get_tickets(user_id)
    if not tickets:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.")
        return

    text = "üìö –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –±–∏–ª–µ—Ç–æ–≤:\n"
    for i, t in enumerate(tickets):
        text += f"{i+1}. {t['question'][:50]}...\n"

    await update.message.reply_text(text)

async def delete_ticket_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: /delete <–Ω–æ–º–µ—Ä>")
        return

    try:
        index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞.")
        return

    if delete_ticket(user_id, index):
        await update.message.reply_text("üóëÔ∏è –ë–∏–ª–µ—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –±–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def explain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    index = int(query.data.split('_')[1])
    ticket = get_tickets(user_id)[index]
    explanation = explain_simple(ticket['answer'])

    await query.message.reply_text(f"üìò –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n{explanation}")

async def train_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tickets = get_tickets(user_id)

    if not tickets:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return

    context.user_data['train_index'] = 0
    await send_train_question(update, context)

async def send_train_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    index = context.user_data.get('train_index', 0)
    tickets = get_tickets(user_id)

    if index >= len(tickets):
        await update.message.reply_text("üéì –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return

    question = tickets[index]['question']
    await update.message.reply_text(f"üß© –í–æ–ø—Ä–æ—Å {index+1}: {question}")
    context.user_data['train_index'] += 1

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tickets", list_tickets))
    app.add_handler(CommandHandler("delete", delete_ticket_cmd))
    app.add_handler(CommandHandler("train", train_mode))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))
    app.add_handler(CallbackQueryHandler(explain_callback, pattern=r"^explain_\d+"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
